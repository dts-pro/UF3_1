import{_ as l,C as a,c,o as u,a4 as i,G as r,w as t,j as n}from"./chunks/framework.DZjLypd3.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"5-depuracio.md","filePath":"5-depuracio.md"}'),d={name:"5-depuracio.md"};function p(g,e,m,f,_,b){const s=a("PluginTabsTab"),o=a("PluginTabs");return u(),c("div",null,[e[1]||(e[1]=i('<h2 id="_8-depuracio-debugging" tabindex="-1">8. Depuració (Debugging) <a class="header-anchor" href="#_8-depuracio-debugging" aria-label="Permalink to &quot;8. Depuració (Debugging)&quot;">​</a></h2><h3 id="_8-1-conceptes-de-depuracio" tabindex="-1">8.1. Conceptes de Depuració <a class="header-anchor" href="#_8-1-conceptes-de-depuracio" aria-label="Permalink to &quot;8.1. Conceptes de Depuració&quot;">​</a></h3><p>La depuració és el procés d&#39;identificar i corregir errors en el codi. Els IDEs ofereixen eines sofisticades per a facilitar aquesta tasca:</p><p><strong>Punts de ruptura (Breakpoints)</strong>: Marques que paren l&#39;execució en línies específiques del codi.</p><p><strong>Execució pas a pas</strong>: Permet avançar línia per línia per a observar el comportament del programa.</p><p><strong>Inspecció de variables</strong>: Visualització dels valors de variables en temps d&#39;execució.</p><p><strong>Pila de crides (Call Stack)</strong>: Mostra la seqüència de funcions que han portat al punt actual.</p><h3 id="_8-2-tipus-de-punts-de-ruptura" tabindex="-1">8.2. Tipus de Punts de Ruptura <a class="header-anchor" href="#_8-2-tipus-de-punts-de-ruptura" aria-label="Permalink to &quot;8.2. Tipus de Punts de Ruptura&quot;">​</a></h3><p>Els IDEs solen oferir diferents tipus de breakpoints:</p><ul><li><strong>Punts de ruptura de línia</strong>: S&#39;activen quan s&#39;arriba a una línia específica</li><li><strong>Punts de ruptura condicionals</strong>: Només s&#39;activen quan es compleix una condició</li><li><strong>Punts de ruptura d&#39;excepció</strong>: S&#39;activen quan es produeix una excepció específica</li><li><strong>Punts de ruptura de mètode</strong>: S&#39;activen en entrar o eixir d&#39;un mètode</li></ul><h3 id="_8-3-controls-de-depuracio" tabindex="-1">8.3. Controls de Depuració <a class="header-anchor" href="#_8-3-controls-de-depuracio" aria-label="Permalink to &quot;8.3. Controls de Depuració&quot;">​</a></h3><p>Durant una sessió de depuració, els controls típics inclouen:</p><p><strong>Continue</strong>: Continua l&#39;execució fins al següent breakpoint o final del programa.</p><p><strong>Step Over</strong>: Executa la línia actual sense entrar dins de les funcions cridadas.</p><p><strong>Step Into</strong>: Entra dins de les funcions cridadas per a depurar-les.</p><p><strong>Step Out</strong>: Surt de la funció actual i torna al context anterior.</p><p><strong>Run to Cursor</strong>: Executa fins a la posició actual del cursor.</p>',17)),r(o,null,{default:t(()=>[r(s,{label:"Java"},{default:t(()=>e[0]||(e[0]=[n("p",null,`// Exemple de depuració: public static void main(String[] args) { int a = 10; // Breakpoint aquí int b = 5; // Step Over per a inspeccionar 'a' int resultat = suma(a, b); // Step Into per a entrar en suma() System.out.println("Resultat: " + resultat); }`,-1),n("p",null,"public static int suma(int x, int y) { return x + y; // Inspeccionar x i y aquí }",-1)])),_:1,__:[0]})]),_:1}),e[2]||(e[2]=i('<h3 id="_8-4-inspeccio-de-variables-i-expressions" tabindex="-1">8.4. Inspecció de Variables i Expressions <a class="header-anchor" href="#_8-4-inspeccio-de-variables-i-expressions" aria-label="Permalink to &quot;8.4. Inspecció de Variables i Expressions&quot;">​</a></h3><p>Los IDEs permeten:</p><ul><li><strong>Visualitzar variables locals</strong> i els seus valors actuals</li><li><strong>Afegir expressions de vigilància</strong> per a monitoritzar valors específics</li><li><strong>Modificar valors</strong> de variables durant la depuració per a provar scenarios</li><li><strong>Avaluar expressions</strong> dinàmicament en el context actual</li></ul><h2 id="_9-refactoring-i-millora-del-codi" tabindex="-1">9. Refactoring i Millora del Codi <a class="header-anchor" href="#_9-refactoring-i-millora-del-codi" aria-label="Permalink to &quot;9. Refactoring i Millora del Codi&quot;">​</a></h2><h3 id="_9-1-concepte-de-refactoring" tabindex="-1">9.1. Concepte de Refactoring <a class="header-anchor" href="#_9-1-concepte-de-refactoring" aria-label="Permalink to &quot;9.1. Concepte de Refactoring&quot;">​</a></h3><p>El refactoring és el procés de reestructurar el codi existent sense canviar el seu comportament extern. Els objectius principals són:</p><ul><li><strong>Millorar la llegibilitat</strong> del codi</li><li><strong>Eliminar duplicació</strong> i codi redundant</li><li><strong>Simplificar l&#39;estructura</strong> complexa</li><li><strong>Millorar el rendiment</strong> sense afectar la funcionalitat</li><li><strong>Facilitar el manteniment</strong> futur</li></ul><h3 id="_9-2-eines-de-refactoring" tabindex="-1">9.2. Eines de Refactoring <a class="header-anchor" href="#_9-2-eines-de-refactoring" aria-label="Permalink to &quot;9.2. Eines de Refactoring&quot;">​</a></h3><p>Els IDEs moderns ofereixen eines automatitzades per a refactoring:</p><p><strong>Rename</strong>: Canvia el nom d&#39;una variable, mètode o classe en tot el projecte.</p><p><strong>Extract Method</strong>: Converteix un bloc de codi en un mètode separat.</p><p><strong>Extract Variable</strong>: Crea una variable per a una expressió complexa.</p><p><strong>Inline</strong>: Substitueix l&#39;ús d&#39;una variable o mètode pel seu contingut.</p><p><strong>Move</strong>: Mou classes o mètodes a un altre paquet o classe.</p><h3 id="_9-3-analisi-de-qualitat-del-codi" tabindex="-1">9.3. Anàlisi de Qualitat del Codi <a class="header-anchor" href="#_9-3-analisi-de-qualitat-del-codi" aria-label="Permalink to &quot;9.3. Anàlisi de Qualitat del Codi&quot;">​</a></h3><p>Els IDEs poden integrar eines d&#39;anàlisi estàtic que detecten:</p><ul><li><strong>Problemes de rendiment</strong> potencials</li><li><strong>Vulnerabilitats de seguretat</strong> comunes</li><li><strong>Violacions d&#39;estàndards</strong> de codificació</li><li><strong>Codi mort</strong> no utilitzat</li><li><strong>Complexitat excessiva</strong> en funcions</li></ul>',17))])}const v=l(d,[["render",p]]);export{h as __pageData,v as default};
